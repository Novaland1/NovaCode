// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";

    interface ITokenBXV {

    function operatorSend(address sender, address recipient, uint256 amount, bytes calldata data, bytes calldata operatorData) external;
    function send(address recipient, uint256 amount, bytes calldata data) external;
    function balanceOf(address account) external view returns (uint256); 
    
    function granularity() external view returns (uint256);
    function defaultOperators() external view returns (address[] memory);
    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);
    function authorizeOperator(address operator) external;
    function revokeOperator(address operator) external;
    }

   interface ICryptoLandCitizenNFT412 {
    function updateValor(uint256 tokenId, int256 valorChange) external;
    function updateCredit(uint256 tokenId, int256 creditChange) external;
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
    function balanceOf(address owner) external view returns (uint256);
   }

   interface ICryptoIrrevocableNoteNFT {
    function mint(address to, uint256 amount, uint256 maturityDate) external returns (uint256);
    function burn(uint256 tokenId) external;
    function ownerOf(uint256 noteId) external view returns (address);
    function totalSupply() external view returns (uint256);  
    function balanceOf(address owner) external view returns (uint256);
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
    }

    contract NovaIrrevocableNote is IERC777Recipient, IERC777Sender, Ownable {
    IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
    
    bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");
    bytes32 private constant TOKENS_SENDER_INTERFACE_HASH = keccak256("ERC777TokensSender");

    ICryptoIrrevocableNoteNFT public nftContract;
    ITokenBXV public tokenB;
    ICryptoLandCitizenNFT412 public citizenNFT;
   
    struct NoteInfo {
    address issuer;
    uint256 amount;
    uint256 startTime;
    uint256 maturityDate;
    uint256 delayCount;
    uint256 delayFees;
    bool isOpenForAll;
    bool isWithdrawn;
    bool isFrozen;        
    bool issuerUnfrozen;  
    }
  
    mapping(uint256 => NoteInfo) public notes;  
    mapping(address => uint256) public userBalance; 
   
    event NoteFrozen(uint256 indexed tokenId, uint256 timestamp);
    event IssuerUnfrozeNote(uint256 indexed tokenId, uint256 timestamp);
    event NoteUnfrozen(uint256 indexed tokenId, uint256 timestamp);
    
    uint256 public constant REQUEST_FEE = 0.0001 ether; // 0.0001 ether
    uint256 public constant CANCEL_FEE = 0.0003 ether;  // 0.0003 ether
    uint256 public constant DELAY_FEE = 0.0005 ether;   // 0.0005 ether
    uint256 public constant ISSUER_UNFREEZE_FEE = 0.001 ether;   
    uint256 public constant HOLDER_UNFREEZE_FEE = 0.002 ether;  
    uint256 public constant MIN_NOTE_AMOUNT = 10*1e18;
    
    uint256 public constant MAX_DELAY_TIMES = 3;  
    uint256 public constant MAX_FEE_RATE = 5;  
   
    uint256 public totalDeposited;    
    uint256 public totalLocked;       

    address public feeReceiver;
    
    event FeeReceiverUpdated(address indexed oldReceiver, address indexed newReceiver);
   
    event WithdrawalRequested(uint256 indexed tokenId, address requester);
    event NoteDelayed(
        uint256 indexed tokenId, 
        uint256 startTime,
        uint256 newMaturityDate
    );
  
    event NoteWithdrawn(uint256 indexed tokenId, address withdrawer, uint256 amount);
   
    event NFTContractUpdated(address indexed oldContract, address indexed newContract);
   
    event BalanceWithdrawn(address indexed user, uint256 amount);

    event EtherReceived(address indexed sender, uint256 amount, uint256 expectedAmount);
   
    // Add a new event for interface registration
    event InterfaceRegistered(address indexed implementation, bytes32 indexed interfaceHash, string interfaceName);
    // Add new event for debugging token receive attempts
    event TokenReceiveAttempt(address indexed sender, address indexed from, address indexed to, uint256 amount);

   
    constructor(
    address _nftContract, 
    address _tokenB,
    address _citizenNFT,   
    address _feeReceiver,
    address initialOwner
   ) Ownable(initialOwner) {
    require(_nftContract != address(0), "Zero address not allowed");
    require(_tokenB != address(0), "Zero address not allowed");
    require(_citizenNFT != address(0), "Zero address not allowed");
    require(_feeReceiver != address(0), "Zero fee receiver");
    require(initialOwner != address(0), "Zero owner address");
    
    nftContract = ICryptoIrrevocableNoteNFT(_nftContract);
    tokenB = ITokenBXV(_tokenB);
    citizenNFT = ICryptoLandCitizenNFT412(_citizenNFT);
    feeReceiver = _feeReceiver;
    
    // Register interfaces with events for debugging
    bytes32 recipientHash = TOKENS_RECIPIENT_INTERFACE_HASH;
    bytes32 senderHash = TOKENS_SENDER_INTERFACE_HASH;
    
    ERC1820_REGISTRY.setInterfaceImplementer(
        address(this),
        recipientHash,
        address(this)
    );
    
    ERC1820_REGISTRY.setInterfaceImplementer(
        address(this),
        senderHash,
        address(this)
    );
    
    emit InterfaceRegistered(address(this), recipientHash, "ERC777TokensRecipient");
    emit InterfaceRegistered(address(this), senderHash, "ERC777TokensSender");
    }

    event TokenTransferDetails(
    address indexed operator,
    address indexed from,
    address indexed to,
    uint256 amount,
    bytes userData,
    bytes operatorData
    );

    event TokensReceived(address indexed from, uint256 amount);
    event NoteCreated(
    uint256 indexed tokenId, 
    address indexed issuer, 
    uint256 amount, 
    uint256 startTime,    
    uint256 maturityDate  
    );

   function getLastNonZeroDigit(uint256 amount) internal pure returns (uint256) {
    while (amount > 0 && amount % 10 == 0) {
        amount = amount / 10;
    }
    return amount % 10;
   }

    function tokensReceived(
    address /*operator*/,    
    address from,        
    address /*to*/,          
    uint256 amount,      
    bytes calldata /*userData*/,
    bytes calldata /*operatorData*/
    ) external override {
    
    emit StepExecuted("Start", amount);
    require(tokenB.balanceOf(from) > 0, "Must hold TokenB");
    emit StepExecuted("Balance Check Passed", tokenB.balanceOf(from));
    
    require(amount >= MIN_NOTE_AMOUNT, "Amount too small");
    emit StepExecuted("Amount Check Passed", amount);
   // Take the last digit and verify
    uint256 lastDigit = getLastNonZeroDigit(amount);
    require(lastDigit > 0 && lastDigit <= 9, "Last digit must be 1-9");
    emit StepExecuted("Last Digit Validated", lastDigit);    
   // Get the lock period and calculate the expiration time
    uint256 duration = getDuration(lastDigit);
    uint256 maturityDate = block.timestamp + duration;
    emit CalculationResult(lastDigit, duration, maturityDate);
    
    
   // Try to mint NFT
    uint256 nftId = nftContract.mint(from, amount, maturityDate);
   // Verify that the NFT was indeed minted successfully - key checkpoint
    require(nftContract.ownerOf(nftId) == from, "Note creation failed");

      if(address(citizenNFT) != address(0)) {
        uint256 issuerBalance = citizenNFT.balanceOf(from);
        if(issuerBalance > 0) {
            uint256 issuerTokenId = citizenNFT.tokenOfOwnerByIndex(from, issuerBalance - 1);
           // You can record this tokenId for subsequent operations or verification
            emit CitizenNFTUpdate("Found issuer citizenNFT", issuerTokenId);
        }
    }

    emit StepExecuted("NFT Minted", nftId);
    
   // 7. Record information
    notes[nftId] = NoteInfo({
        issuer: from,
        amount: amount,
        startTime: block.timestamp,
        maturityDate: maturityDate,
        delayCount: 0,
        delayFees: 0,
        isOpenForAll: false,
        isWithdrawn: false,
        isFrozen: false,
        issuerUnfrozen: false
    });
    
    totalDeposited += amount;
    totalLocked += amount;
    
   
    emit TokensReceived(from, amount);
    emit NoteCreated(nftId, from, amount, block.timestamp, maturityDate);
    }

    event CitizenNFTUpdate(string step, uint256 tokenId);
    

    event StepExecuted(string step, uint256 value);
    event CalculationResult(uint256 lastDigit, uint256 duration, uint256 maturityDate);

   function tokensToSend(
    address /*operator*/,
    address /*from*/,
    address /*to*/,
    uint256 amount,
    bytes calldata /*userData*/,
    bytes calldata /*operatorData*/
   ) external pure override {
   // Pure calculation, no need to read status
    uint256 maxFee = (amount * 5) / 1000;
    amount = amount - maxFee;
   }

    function validateSendAmount(uint256 amount) public pure returns (
    bool isValid,
    uint256 lastDigit,
    uint256 fullTokens,
    string memory message
   ) {
    fullTokens = amount / 1e18; 
   
    if (fullTokens < 10) {
        return (false, 0, fullTokens, "Amount must be at least 10 tokens");
    } 
   // Directly take the last digit of amount
    lastDigit = amount % 10;
    
   // Verify the last digit
    if (lastDigit == 0 || lastDigit > 9) {
        return (false, lastDigit, fullTokens, "Last digit must be between 1-9");
    }
    
    return (true, lastDigit, fullTokens, "Amount is valid");
    }

    
    function getLastDecimalDigit(uint256 amount) public pure returns (uint256) {
        uint256 decimalPart = amount % 1e18;  
        if(decimalPart == 0) return 0;
        
        while(decimalPart % 10 == 0 && decimalPart > 0) {
            decimalPart = decimalPart / 10;
        }
        return decimalPart % 10;
    }
    
    function getDuration(uint256 lastDigit) internal pure returns (uint256) {
    if(lastDigit == 1) return 1 days;
    if(lastDigit == 2) return 3 days;
    if(lastDigit == 3) return 7 days;
    if(lastDigit == 4) return 14 days;
    if(lastDigit == 5) return 30 days;
    if(lastDigit == 6) return 90 days;
    if(lastDigit == 7) return 180 days;
    if(lastDigit == 8) return 360 days;
    if(lastDigit == 9) return 720 days;
    revert("Invalid duration digit");
   }

   // External query function, make sure to use the correct function name
    function queryDuration(uint256 lastDigit) external pure returns (uint256) {
    return getDuration(lastDigit);  
   }

   function getAddressDuration(address userAddr) external pure returns (uint256) {
    uint256 lastDigit = uint256(uint160(userAddr)) % 10;
    uint256 duration = getDuration(lastDigit);  
    return duration;
   }

  
   receive() external payable {
    if(msg.value == CANCEL_FEE) {
       handleCancel();
    
    } else if(msg.value == REQUEST_FEE) {
        handleRequestWithdraw();
    } else if(msg.value == DELAY_FEE) {
        handleDelay();
    } else if(msg.value == ISSUER_UNFREEZE_FEE) {
        issuerUnfreeze();
    } else if(msg.value == HOLDER_UNFREEZE_FEE) {
        holderUnfreeze();
    } else {
        revert("Invalid amount");
    }
    }


  
    function handleDelay() internal {
   // Find valid notes under the user's address
    uint256 tokenId = 0;
    
    // Look up a valid note from the notes map with this user as the issuer
    for (uint256 i = 1; i <= 1000000; i++) { // Set a reasonable traversal range
        if (notes[i].issuer == msg.sender && 
            notes[i].amount > 0 &&        // Ticket exists
            !notes[i].isWithdrawn &&      // Not extracted
            !notes[i].isFrozen) {      // Not open
            tokenId = i;
            break;
        }
    }
    
    require(tokenId > 0, "No valid note found");
    
   // Use the notes mapping directly
    NoteInfo storage note = notes[tokenId];
    
    // Subsequent processing
    require(!note.isFrozen, "Note is frozen");
    require(block.timestamp < note.maturityDate, "Must delay before maturity");
    
   // Check contract balance
    uint256 contractBalance = tokenB.balanceOf(address(this));
    require(contractBalance >= totalLocked, "Contract balance less than locked amount");
    
   // Modify the freeze judgment of the deferred calculation
    if((note.delayCount + 14) % MAX_DELAY_TIMES == 0) {  // Use modulo calculation
    note.isFrozen = true;
    emit NoteFrozen(tokenId, block.timestamp);
    }
    
    uint256 newMaturityDate = note.maturityDate + 1 days;
    note.maturityDate = newMaturityDate;
    note.delayCount++;
    note.delayFees += msg.value;
    
    emit NoteDelayed(tokenId, note.startTime, newMaturityDate);
    payable(feeReceiver).transfer(msg.value);
    }


   event IssuerUnfrozen(uint256 indexed tokenId);
   event NoteUnfrozen(uint256 indexed tokenId);
   event FrozenByDelays(uint256 indexed tokenId);
 
   // Modify the thawing function according to the structure
   function issuerUnfreeze() internal {
   uint256 foundTokenId = 0;
    
   // Traverse and check for unextracted tickets
    for (uint256 i = 1; i <= 1000000; i++) {
        NoteInfo storage currentNote = notes[i];
        if (currentNote.issuer == msg.sender && 
            !currentNote.isWithdrawn &&
            currentNote.isFrozen) {   // Check the issuer, unwithdrawn and frozen
            foundTokenId = i;
            break;
        }
    }
    
    require(foundTokenId > 0, "No valid note found");
    
    // Get the found ticket
    NoteInfo storage note = notes[foundTokenId];
    require(msg.value ==ISSUER_UNFREEZE_FEE, "Incorrect unfreeze fee");
    require(!note.issuerUnfrozen, "Already unfrozen by issuer");
    
    // Execute thawing
    note.issuerUnfrozen = true;
    emit IssuerUnfrozeNote(foundTokenId, block.timestamp);
    payable(feeReceiver).transfer(msg.value);
   }

    function holderUnfreeze() internal {
    require(msg.value == HOLDER_UNFREEZE_FEE, "Incorrect unfreeze fee");
    uint256 balance = nftContract.balanceOf(msg.sender);
    require(balance > 0, "No NFTs found");
    
    // Get the NFT currently held by the holder
    uint256 tokenId = nftContract.tokenOfOwnerByIndex(msg.sender,  balance - 1);  // Latest ticket NFT
    NoteInfo storage note = notes[tokenId];
    
    // Then check the ticket status
    require(note.isFrozen, "Note not frozen"); // Must be in frozen state
    require(note.issuerUnfrozen, "Issuer not unfrozen yet");  // The issuer must have been unfrozen
    require(!note.isWithdrawn, "Note already deal");  // The ticket has not been extracted
    // Execute thawing
    note.isFrozen = false;
    note.issuerUnfrozen = false;  // Reset state
    note.isOpenForAll = true; // Open functions
    emit NoteUnfrozen(tokenId, block.timestamp);
    payable(feeReceiver).transfer(msg.value);
    }
    
     // Add event definition
    event TokenReturn(address indexed user, uint256 netAmount);  // TokenB returns
    event NoteBurned(uint256 indexed tokenId);   //NFT Destruction
    event NoteCancelled(uint256 indexed tokenId);
    
    function handleCancel() internal {
    uint256 balance = nftContract.balanceOf(msg.sender);
    require(balance > 0, "Step1: No NFTs found");
    uint256 tokenId = nftContract.tokenOfOwnerByIndex(msg.sender, balance - 1);
    NoteInfo storage note = notes[tokenId];
    
    require(note.issuer == msg.sender, "Not the note issuer");
    require(!note.isWithdrawn, "Already withdrawn");
   // Check the balance of a specific bill
    uint256 contractBalance = tokenB.balanceOf(address(this));
    require(contractBalance >= totalLocked, " Contract balance less than locked amount");   
    require(contractBalance >= note.amount, " Insufficient balance for withdrawal");
  
    uint256 maxFee = (note.amount * MAX_FEE_RATE) / 1000;
  
   //Send TokenB and emit event
    tokenB.send(msg.sender, note.amount-maxFee, "");
    emit TokenReturn(msg.sender, note.amount);
    
    totalLocked -= note.amount;
    note.isWithdrawn = true;
     
    payable(feeReceiver).transfer(msg.value);
    emit NoteCancelled(tokenId);
    }

   function handleRequestWithdraw() internal {
    uint256 balance = nftContract.balanceOf(msg.sender);
    require(balance > 0, "Step1: No NFTs found");

    // Check the total contract balance
    uint256 contractBalance = tokenB.balanceOf(address(this));
    require(contractBalance >= totalLocked, "Step2: Contract balance less than locked amount");   
    
    uint256 tokenId = nftContract.tokenOfOwnerByIndex(msg.sender, balance - 1);
    NoteInfo storage note = notes[tokenId];
    
   // Basic checks
    require(!note.isFrozen, "Step3: Note is frozen");
    require(!note.isWithdrawn, "Step4: Already withdrawn");
    require(contractBalance >= note.amount, "Step5: Insufficient balance for withdrawal");

    // Fork processing: different extraction logic according to isOpenForAll status
    if (note.isOpenForAll) {
        // Consensus path: can be withdrawn immediately
        handleConsensusWithdraw(note, tokenId);
    } else {
        // Normal expiration path
        require(block.timestamp > note.maturityDate, "Not matured yet");
        handleMaturityWithdraw(note, tokenId);
    }
    }

    // Process the consensus extraction
    function handleConsensusWithdraw(NoteInfo storage note, uint256 tokenId) private {
    uint256 maxFee = (note.amount * MAX_FEE_RATE) / 1000;
    tokenB.send(msg.sender, note.amount-maxFee, "");
    emit NoteWithdrawn(tokenId, msg.sender, note.amount);
    totalLocked -= note.amount;
    note.isWithdrawn = true;
    // Add specific consensus extraction events
    emit ConsensusWithdrawn(tokenId, msg.sender, note.amount);

    // If the citizen NFT contract is set, update the rewards for both parties
    if(address(citizenNFT) != address(0)) {
       // Update the rewards of the holder (current withdrawer)
        uint256 holderBalance = citizenNFT.balanceOf(msg.sender);
        if(holderBalance > 0) {
            uint256 holderTokenId = citizenNFT.tokenOfOwnerByIndex(msg.sender, holderBalance - 1);
            try citizenNFT.updateValor(holderTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                try citizenNFT.updateCredit(holderTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                  //Holder rewards updated successfully
                } catch {
                   // Continue if credit update fails
                }
            } catch {
               // valor update failed to continue
            }
        }

        // Update issuer's rewards
        uint256 issuerBalance = citizenNFT.balanceOf(note.issuer);
        if(issuerBalance > 0) {
            uint256 issuerTokenId = citizenNFT.tokenOfOwnerByIndex(note.issuer, issuerBalance - 1);
            try citizenNFT.updateValor(issuerTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                try citizenNFT.updateCredit(issuerTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                   // Issuer reward updated successfully
                } catch {
                  // Continue if credit update fails
                }
            } catch {
               // valor update failed to continue
            }
        }
    }

    payable(feeReceiver).transfer(msg.value);
    }


   // Handle normal expiration extraction
    function handleMaturityWithdraw(NoteInfo storage note, uint256 tokenId) private {
    uint256 maxFee = (note.amount * MAX_FEE_RATE) / 1000;
    tokenB.send(msg.sender, note.amount-maxFee, "");
    emit NoteWithdrawn(tokenId, msg.sender, note.amount);
    totalLocked -= note.amount;
    note.isWithdrawn = true;
    // Add a specific expiration extraction event
    emit MaturityWithdrawn(tokenId, msg.sender, note.amount);

     // If the citizen NFT contract is set, update the rewards for both parties
    if(address(citizenNFT) != address(0)) {
       // Update the rewards of the holder (current withdrawer)
        uint256 holderBalance = citizenNFT.balanceOf(msg.sender);
        if(holderBalance > 0) {
            uint256 holderTokenId = citizenNFT.tokenOfOwnerByIndex(msg.sender, holderBalance - 1);
            try citizenNFT.updateValor(holderTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                try citizenNFT.updateCredit(holderTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                    //Holder rewards updated successfully
                } catch {
                    // Continue if credit update fails
                }
            } catch {
                // valor update failed to continue
            }
        }

        // Update issuer's rewards
        uint256 issuerBalance = citizenNFT.balanceOf(note.issuer);
        if(issuerBalance > 0) {
            uint256 issuerTokenId = citizenNFT.tokenOfOwnerByIndex(note.issuer, issuerBalance - 1);
            try citizenNFT.updateValor(issuerTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                try citizenNFT.updateCredit(issuerTokenId, int256((note.amount * 5) / 100 / 1e12)) {
                    // Issuer reward updated successfully
                } catch {
                    // Issuer reward updated successfully
                }
            } catch {
               // valor update failed to continue
            }
        }
    }
    
    payable(feeReceiver).transfer(msg.value);
    }


   
    event ConsensusWithdrawn(uint256 indexed tokenId, address indexed user, uint256 amount);
    event MaturityWithdrawn(uint256 indexed tokenId, address indexed user, uint256 amount);
    
    


    function getContractName() external pure returns (string memory) {
        return "Nova Irrevocable Note";
    }

      function getLockedBalance() external view returns (uint256) {
        return totalLocked;
    }
   // View the complete information of the bill
    function getNoteInfo(uint256 tokenId) external view returns (
        address issuer,
        uint256 amount,
        uint256 startTime,
        uint256 maturityDate,
        uint256 delayCount,
        uint256 delayFees,
        bool isOpenForAll,
        bool isWithdrawn,
        bool isFrozen,       
        bool issuerUnfrozen 
    ) {
        NoteInfo storage note = notes[tokenId];
        return (
            note.issuer,
            note.amount,
            note.startTime,
            note.maturityDate,
            note.delayCount,
            note.delayFees,
            note.isOpenForAll,
            note.isWithdrawn,
            note.isFrozen,       
            note.issuerUnfrozen 
        );
    }


      function setNFTContract(address _newNFTContract) external onlyOwner {
        require(_newNFTContract != address(0), "Zero address not allowed");
        require(_newNFTContract != address(nftContract), "Same address");
        
        //Record the old address for events
        address oldContract = address(nftContract);
        
        // Update contract address - use correct interface type
        nftContract = ICryptoIrrevocableNoteNFT(_newNFTContract);
        
        // Trigger update event
        emit NFTContractUpdated(oldContract, _newNFTContract);
    }

     // Fix duplicate declaration of state variables in getContractBalances function
    function getContractBalances() external view returns (
        uint256 tokenBBalance,    //TokenB balance
        uint256 deposited,        // Total deposit (to avoid naming conflicts)
        uint256 locked,           // Total lock (to avoid naming conflicts)
        uint256 availableBalance  // Available balance
    ) {
        tokenBBalance = tokenB.balanceOf(address(this));
        deposited = totalDeposited;
        locked = totalLocked;
        availableBalance = tokenBBalance - locked;
        return (tokenBBalance, deposited, locked, availableBalance);
    }

    function validateContractState() public view returns (bool) {
        return ERC1820_REGISTRY.getInterfaceImplementer(
            address(this), 
            TOKENS_RECIPIENT_INTERFACE_HASH
        ) == address(this);
    }

     // Add query function
    function getNoteTimeInfo(uint256 tokenId) external view returns (
        uint256 startTime,
        uint256 maturityDate,
        uint256 remainingTime,
        bool isMatured
    ) {
        NoteInfo storage note = notes[tokenId];
        require(note.amount > 0, "Note does not exist");
        
        startTime = note.startTime;
        maturityDate = note.maturityDate;
        
        if (block.timestamp >= maturityDate) {
            remainingTime = 0;
            isMatured = true;
        } else {
            remainingTime = maturityDate - block.timestamp;
            isMatured = false;
        }
    }

   // Add time status query
    function getNoteStatus(uint256 tokenId) external view returns (
        string memory status,
        uint256 startTime,
        uint256 maturityDate,
        uint256 remainingTime
    ) {
        NoteInfo storage note = notes[tokenId];
        require(note.amount > 0, "Note does not exist");
        
        if (note.isWithdrawn) {
            status = "Withdrawn";
        } else if (block.timestamp >= note.maturityDate + 7 days) {
            status = "Overdue";
        } else if (block.timestamp >= note.maturityDate) {
            status = "Matured";
       
        } else {
            status = "Active";
        }
        
        startTime = note.startTime;
        maturityDate = note.maturityDate;
        remainingTime = block.timestamp < maturityDate ? maturityDate - block.timestamp : 0;
    }

    // Query the overall status of the contract
    function getContractStatus() external view returns (
        uint256 totalDepositedAmount,
        uint256 totalLockedAmount,
        uint256 availableAmount
    ) {
        return (
            totalDeposited,
            totalLocked,
            totalDeposited - totalLocked
        );
    }

     function getTokenBBalance() public view returns (uint256) {
        return tokenB.balanceOf(address(this));
    }

    // Query the balance of the specified address
    function getTokenBBalanceOf(address account) public view returns (uint256) {
        return tokenB.balanceOf(account);
    }

    function checkInterfaces() public view returns (
    bool isRecipientRegistered,
    bool isSenderRegistered,
    address recipientImplementer,
    address senderImplementer,
    address tokenBAddress,
    bytes32 recipientHash,
    bytes32 senderHash
    ) {
    recipientHash = TOKENS_RECIPIENT_INTERFACE_HASH;
    senderHash = TOKENS_SENDER_INTERFACE_HASH;
    
    recipientImplementer = ERC1820_REGISTRY.getInterfaceImplementer(
        address(this),
        TOKENS_RECIPIENT_INTERFACE_HASH
    );
    
    senderImplementer = ERC1820_REGISTRY.getInterfaceImplementer(
        address(this),
        TOKENS_SENDER_INTERFACE_HASH
    );
    
    isRecipientRegistered = recipientImplementer == address(this);
    isSenderRegistered = senderImplementer == address(this);
    tokenBAddress = address(tokenB);
    }

    // Add this function to forcefully re-register interfaces
    function reRegisterInterfaces() external onlyOwner {
    ERC1820_REGISTRY.setInterfaceImplementer(
        address(this),
        TOKENS_RECIPIENT_INTERFACE_HASH,
        address(this)
    );
    
    ERC1820_REGISTRY.setInterfaceImplementer(
        address(this),
        TOKENS_SENDER_INTERFACE_HASH,
        address(this)
    );
    }

    function setCitizenNFT(address _newCitizenNFT) external onlyOwner {
    require(_newCitizenNFT != address(0), "Zero address not allowed");
    require(_newCitizenNFT != address(citizenNFT), "Same address");
    
   //Record the old address for events
    address oldCitizenNFT = address(citizenNFT);
    
   // Update contract address
    citizenNFT = ICryptoLandCitizenNFT412(_newCitizenNFT);
    
   // Trigger update event
    emit CitizenNFTUpdated(oldCitizenNFT, _newCitizenNFT);
   }

   // Add corresponding events
   event CitizenNFTUpdated(address indexed oldCitizenNFT, address indexed newCitizenNFT);

    function setFeeReceiver(address _newReceiver) external onlyOwner {
        require(_newReceiver != address(0), "Zero address not allowed");
        emit FeeReceiverUpdated(feeReceiver, _newReceiver);
        feeReceiver = _newReceiver;
    }


      function isOwnerOrOwnedByOwner(address account) public view returns (bool) {
        if (account == owner()) {
            return true;
        }
        try Ownable(account).owner() returns (address accountOwner) {
            return accountOwner == owner();
        } catch {
            return false;
        }
    }

     function setTokenBXVAddress(address newAddress) external onlyOwner {
        require(newAddress != address(0), "Invalid address");
        tokenB = ITokenBXV(newAddress);
        
    }

   
  
    
}


