// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC777/ERC777.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol";
import "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";
import "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenA is ERC777, IERC777Sender, IERC777Recipient, Ownable {
    IERC1820Registry private constant erc1820registry = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
    
    struct FeeStructure {
        uint256 threshold;
        uint256 rate;
    }
    FeeStructure[] public feeStructures;

    address public feeRecipient;
    address public immutable authorizedContract;

    event FeeStructureUpdated();
    event TokensMinted(address indexed to, uint256 amount, address indexed minter);
    event FeeRecipientUpdated(address indexed oldRecipient, address indexed newRecipient); 

    constructor(
        string memory name,
        string memory symbol,
        address[] memory defaultOperators,
        address _feeRecipient,
        address initialOwner,
        address _authorizedContract
    ) ERC777(name, symbol, defaultOperators) Ownable(initialOwner) {
        require(_authorizedContract != address(0), "Invalid authorized contract");
        require(_authorizedContract.code.length > 0, "Authorized address must be a contract");
        
        feeRecipient = _feeRecipient;
        authorizedContract = _authorizedContract;

        // Initialize fee structures
        feeStructures.push(FeeStructure(0, 1));      
        feeStructures.push(FeeStructure(10 * 1e18, 1));  
        feeStructures.push(FeeStructure(100 * 1e18, 3));  
        feeStructures.push(FeeStructure(1000 * 1e18, 5)); 

        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777TokensSender"), address(this));
        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777TokensRecipient"), address(this));
    }

    // Add a function to set the fee receiving address
    function setFeeRecipient(address newFeeRecipient) external onlyOwner {
        require(newFeeRecipient != address(0), "Invalid fee recipient address");
        require(newFeeRecipient != feeRecipient, "New address is the same as current");
        
        address oldFeeRecipient = feeRecipient;
        feeRecipient = newFeeRecipient;
        
        emit FeeRecipientUpdated(oldFeeRecipient, newFeeRecipient);
    }

    function mint(address to, uint256 amount) public {
        require(msg.sender == authorizedContract, "Only authorized contract can mint");
        require(msg.sender != tx.origin, "Direct calls not allowed");
        require(to != address(0), "Invalid recipient address");
        require(amount > 0, "Amount must be greater than 0");
        
        _mint(to, amount, "", "");
        emit TokensMinted(to, amount, msg.sender);
    }
    
    function burn(address from, uint256 amount) public {
        require(msg.sender == from || msg.sender == authorizedContract, "Not authorized to burn");
        _burn(from, amount, "", "");
    }

    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(operator, from, to, amount);

        uint256 fee = calculateFee(amount);
        if (fee > 0 && from != address(0)) {
            _send(from, feeRecipient, fee, "", "", false);
        }
    }

    function calculateFee(uint256 amount) internal view returns (uint256) {
        for (uint i = feeStructures.length; i > 0; i--) {
            if (amount >= feeStructures[i-1].threshold) {
                return (amount * feeStructures[i-1].rate) / 1000;
            }
        }
        return 0;
    }

    function updateFeeStructure(uint256[] memory thresholds, uint256[] memory rates) external onlyOwner {
        require(thresholds.length == rates.length, "Arrays length mismatch");
        require(thresholds.length > 0, "Empty arrays not allowed");
        
        delete feeStructures;
        for (uint i = 0; i < thresholds.length; i++) {
            require(rates[i] <= 100, "Fee rate too high"); // Maximum rate limit of 10%
            if (i > 0) {
                require(thresholds[i] > thresholds[i-1], "Thresholds must be ascending");
            }
            feeStructures.push(FeeStructure(thresholds[i], rates[i]));
        }
        emit FeeStructureUpdated();
    }

    function tokensToSend(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external override {
        // The logic before sending can be added here
    }

    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external override {
       // The logic after receiving can be added here
    }
}
